{"version":3,"sources":["useLife.ts","App.tsx","useTimer.ts","index.tsx"],"names":["randomCell","Math","round","random","useLife","width","height","useState","grid","setGrid","get","x","y","r","countNeighbors","reset","useCallback","fill","Array","from","length","makeArray","useEffect","step","newGrid","newRow","neighbors","push","App","callback","interval","running","setRunning","fn","useRef","current","intervalId","setInterval","clearInterval","toggle","state","useTimer","buttonStyles","display","backgroundColor","borderColor","color","padding","margin","fontFize","lineHeight","fontWeight","style","textAlign","onClick","gridTemplateColumns","justifyContent","map","rows","rowIndex","col","colIndex","key","border","ReactDOM","render","document","getElementById"],"mappings":"sMAEA,IAAMA,EAAa,kBAAcC,KAAKC,MAAMD,KAAKE,WAKlC,SAASC,EAAQC,EAAeC,GAAiB,IAAD,EACrCC,mBAAqB,IADgB,mBACtDC,EADsD,KAChDC,EADgD,KAGvDC,EAAM,SAACC,EAAWC,GAAZ,IAAuBC,EAAvB,uDAA2BL,EAAKG,GAAhC,OAAuCE,GAAIA,EAAED,IAAU,GAE7DE,EAAiB,SAACH,EAAWC,GACjC,OACEF,EAAIC,EAAI,EAAGC,EAAI,GACfF,EAAIC,EAAI,EAAGC,GACXF,EAAIC,EAAI,EAAGC,EAAI,GACfF,EAAIC,EAAGC,EAAI,GACXF,EAAIC,EAAGC,EAAI,GACXF,EAAIC,EAAI,EAAGC,EAAI,GACfF,EAAIC,EAAI,EAAGC,GACXF,EAAIC,EAAI,EAAGC,EAAI,IAiCbG,EAAQC,uBAAY,WACxBP,EAnDc,SAACJ,EAAeC,GAAhB,IAAgCW,EAAhC,uDAAuCjB,EAAvC,OAChBkB,MAAMC,KAAK,CAAEC,OAAQf,IAAS,kBAAMa,MAAMC,KAAK,CAAEC,OAAQd,GAAUW,MAkDzDI,CAAUhB,EAAOC,MACxB,CAACD,EAAOC,IASX,OAPAgB,qBACE,WACEP,MAEF,CAACA,IAGI,CAAEA,QAAOP,OAAMe,KAxCT,WAGX,IAFA,IAAMC,EAAsB,GAEnBb,EAAI,EAAGA,EAAIN,EAAOM,IAAK,CAG9B,IAFA,IAAMc,EAAmB,GAEhBb,EAAI,EAAGA,EAAIN,EAAQM,IAAK,CAC/B,IAAMc,EAAYZ,EAAeH,EAAGC,GAEhCF,EAAIC,EAAGC,GACLc,EAAY,EACdD,EAAOE,KAAK,GACHD,EAAY,EACrBD,EAAOE,KAAK,GAEZF,EAAOE,KAAK,GAES,IAAdD,EACTD,EAAOE,KAAK,GAEZF,EAAOE,KAAK,GAGhBH,EAAQG,KAAKF,GAGfhB,EAAQe,KC9CZ,IAsDeI,EAlDO,WAAO,IAAD,EACIxB,EALhB,GACA,IAINI,EADkB,EAClBA,KAAMO,EADY,EACZA,MADY,ECPb,SAAkBc,EAAoBC,GAAmB,IAAD,EACvCvB,oBAAkB,GADqB,mBAC9DwB,EAD8D,KACrDC,EADqD,KAE/DC,EAAKC,iBAAiBL,GAgB5B,OAfAI,EAAGE,QAAUN,EAEbP,qBACE,WACE,GAAIS,EAAS,CACX,IAAMK,EAAaC,aAAY,kBAAMJ,EAAGE,YAAWL,GAEnD,OAAO,WACLQ,cAAcF,OAIpB,CAACL,EAASD,IAGL,CACLC,UACAQ,OAFK,WAGHP,GAAW,SAAAQ,GAAK,OAAKA,ODZGC,CAFF,EACLlB,KAHN,KAIPQ,EAFkB,EAElBA,QAASQ,EAFS,EAETA,OAEXG,EAAe,CACnBC,QAAS,eACTC,gBAAiB,UACjBC,YAAa,UACbC,MAAO,OACPC,QAAS,iBACTC,OAAQ,cACRC,SAAU,OACVC,WAAY,MACZC,WAAY,KAGd,OACE,oCACE,4BAAQC,MAAO,CAACC,UAAW,SAAUN,QAAS,SAC5C,4BAAQO,QAAS,WAAOf,KAAWa,MAAOV,GACvCX,EAAU,OAAS,SAEtB,4BAAQuB,QAAS,WAAOvC,KAAUqC,MAAOV,GAAzC,UAIF,yBACEU,MAAO,CACLT,QAAS,OACTY,oBAAoB,UAAD,OAhCb,GAgCa,WACnBC,eAAgB,WAGjBhD,EAAKiD,KAAI,SAACC,EAAgBC,GAAjB,OACRD,EAAKD,KAAI,SAACG,EAAKC,GAAN,OACP,yBACEC,IAAG,UAAKH,EAAL,YAAiBE,GACpBT,MAAO,CACL/C,MAAO,GACPC,OAAQ,GACRsC,gBAAiBpC,EAAKmD,GAAUE,GAAY,YAAc,cAC1DE,OAAQ,8BE9CxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e24b9b84.chunk.js","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nconst randomCell = (): number => Math.round(Math.random());\n\nconst makeArray = (width: number, height: number, fill = randomCell): number[][] =>\n  Array.from({ length: width }, () => Array.from({ length: height }, fill));\n\nexport default function useLife(width: number, height: number) {\n  const [grid, setGrid] = useState<number[][]>([]);\n\n  const get = (x: number, y: number, r = grid[x]) => r ? r[y] || 0 : 0;\n  \n  const countNeighbors = (x: number, y: number) => {\n    return (\n      get(x - 1, y - 1) +\n      get(x - 1, y) +\n      get(x - 1, y + 1) +\n      get(x, y - 1) +\n      get(x, y + 1) +\n      get(x + 1, y - 1) +\n      get(x + 1, y) +\n      get(x + 1, y + 1)\n    );\n  }\n\n  const step = () => {\n    const newGrid: number[][] = [];\n\n    for (let x = 0; x < width; x++) {\n      const newRow: number[] = [];\n\n      for (let y = 0; y < height; y++) {\n        const neighbors = countNeighbors(x, y);\n\n        if (get(x, y)) {\n          if (neighbors < 2) {\n            newRow.push(0);\n          } else if (neighbors < 4) {\n            newRow.push(1);\n          } else {\n            newRow.push(0);\n          }\n        } else if (neighbors === 3) {\n          newRow.push(1);\n        } else {\n          newRow.push(0);\n        }\n      }\n      newGrid.push(newRow);\n    }\n\n    setGrid(newGrid);\n  }\n\n  const reset = useCallback(() => {\n    setGrid(makeArray(width, height));\n  }, [width, height])  \n\n  useEffect(\n    () => {\n      reset();\n    },\n    [reset]\n  );\n\n  return { reset, grid, step };\n}\n","import React from 'react';\n\nimport useTimer from './useTimer'\nimport useLife from './useLife'\n\nconst numRows = 25;\nconst numCols = 25;\nconst interval = 100\n\nconst App: React.FC = () => {\n  const { grid, reset, step } = useLife(numRows, numCols);\n  const { running, toggle } = useTimer(step, interval);\n\n  const buttonStyles = {\n    display: 'inline-block',\n    backgroundColor: '#007BFF',\n    borderColor: '#007BFF',\n    color: '#FFF',\n    padding: '.375rem .75rem',\n    margin: '.5rem .5rem',\n    fontFize: '1rem',\n    lineHeight: '1.5',\n    fontWeight: 500\n  }\n  \n  return (\n    <>\n      <header style={{textAlign: 'center', padding: '2rem'}}>\n        <button onClick={() => {toggle()}} style={buttonStyles}>\n          {running ? 'Stop' : 'Start'}\n        </button>\n        <button onClick={() => {reset()}} style={buttonStyles}>\n          Reset\n        </button>\n      </header>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n          justifyContent: 'center'\n        }}\n      >\n        {grid.map((rows: number[], rowIndex: number) => (\n          rows.map((col, colIndex) => (\n            <div \n              key={`${rowIndex}-${colIndex}`}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[rowIndex][colIndex] ? 'lightblue' : 'transparent',\n                border: 'solid 1px black'\n              }} />\n          ))\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { useRef, useState, useEffect } from 'react';\n\nexport default function useTimer(callback: Function, interval: number) {\n  const [running, setRunning] = useState<Boolean>(false);\n  const fn = useRef<Function>(callback);\n  fn.current = callback; \n\n  useEffect(\n    () => {\n      if (running) {\n        const intervalId = setInterval(() => fn.current(), interval);\n        \n        return function cleanup() { \n          clearInterval(intervalId);\n        }\n      }\n    },\n    [running, interval]\n  );\n\n  return {\n    running,\n    toggle() {\n      setRunning(state => !state);\n    }\n  };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}